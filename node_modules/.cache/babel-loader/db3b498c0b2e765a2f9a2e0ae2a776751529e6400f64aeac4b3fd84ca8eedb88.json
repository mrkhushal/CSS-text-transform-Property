{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport { useState } from \"react\";\nimport About from \"./components/About\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setmode] = useState('light');\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n    } else {\n      setmode('light');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      about: \"about us\",\n      mode: mode,\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      children: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Textform, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"Z/xej/1a2AEisYTYJsRdYq5oPG4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","Textform","useState","About","BrowserRouter","Router","Switch","Route","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setmode","toggleMode","children","about","fileName","_jsxFileName","lineNumber","columnNumber","path","_c","$RefreshReg$"],"sources":["C:/React/my-app/src/App.js"],"sourcesContent":["import Navbar from \"./components/Navbar\";\r\nimport Textform from \"./components/Textform\";\r\nimport { useState } from \"react\"\r\nimport About from \"./components/About\";\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction App(){\r\n    const [mode, setmode] = useState('light');\r\n    const toggleMode = ()=>{\r\n       if(mode === 'light'){\r\n        setmode('dark'); \r\n    }else{\r\n        setmode ('light'); \r\n       }\r\n    }\r\nreturn(\r\n    <>    \r\n<Navbar  about=\"about us\" mode={mode} toggleMode={toggleMode} />\r\n \r\n<Route path=\"/about\">\r\n<About />\r\n</Route> \r\n<Route path=\"/\">\r\n<Textform/>\r\n</Route> \r\n    </>\r\n);\r\n}\r\n\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,oBAAoB;AAEtC,SACIC,aAAa,IAAIC,MAAM,EACvBC,MAAM,EACNC,KAAK,EACLC,IAAI,QACC,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG5B,SAASC,GAAGA,CAAA,EAAE;EAAAC,EAAA;EACV,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAMe,UAAU,GAAGA,CAAA,KAAI;IACpB,IAAGF,IAAI,KAAK,OAAO,EAAC;MACnBC,OAAO,CAAC,MAAM,CAAC;IACnB,CAAC,MAAI;MACDA,OAAO,CAAE,OAAO,CAAC;IAClB;EACH,CAAC;EACL,oBACIN,OAAA,CAAAE,SAAA;IAAAM,QAAA,gBACJR,OAAA,CAACV,MAAM;MAAEmB,KAAK,EAAC,UAAU;MAACJ,IAAI,EAAEA,IAAK;MAACE,UAAU,EAAEA;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEhEb,OAAA,CAACH,KAAK;MAACiB,IAAI,EAAC,QAAQ;MAAAN,QAAA,eACpBR,OAAA,CAACP,KAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACRb,OAAA,CAACH,KAAK;MAACiB,IAAI,EAAC,GAAG;MAAAN,QAAA,eACfR,OAAA,CAACT,QAAQ;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA,eACF,CAAC;AAEP;AAACT,EAAA,CArBQD,GAAG;AAAAY,EAAA,GAAHZ,GAAG;AAwBZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}